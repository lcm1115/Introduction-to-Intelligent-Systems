% Author:      Liam Morris
% File:        bagger.plg
% Description: Implementation of an expert system for bagging groceries.

:- dynamic
    num_items/1,
    bag_num/1,
    current_bag/1,
    finished/1,
    frozen/1,
    is_bottle/1,
    medium_item/1,
    large_item/1,
    type/2,
    small_item/1,
    step_is/1,
    there_is/1.

num_items(0).
bag_num(0).
current_bag(none).

inc_contents :-
    num_items(X),
    Y is X + 1,
    retract(num_items(X)),
    assert(num_items(Y)),
    nl,
    write('Bag type is now '),
    write(Y),
    nl.

inc_bag_num :-
    bag_num(X),
    Y is X + 1,
    retract(bag_num(X)),
    assert(bag_num(Y)),
    nl,
    write('Bag number is now '),
    write(Y),
    nl,
    assert(finished(X)).

% Rule 1
action_is(add-bottle-of-pepsi):-
    step_is(check-order),
    medium_item(chips),
    not(medium_item(pepsi-bottle)),
    assert(medium_item(pepsi-bottle)),
    write('Adding bottle of Pepsi'),
    nl.

% Rule 2
action_is(start-bag-large-items):-
    step_is(check-order),
    retract(step_is(check-order)),
    assert(step_is(bag-large-items)),
    write('Bagging large items'),
    nl.

% Rule 3
action_is(put-large-item-in-bag):-
    step_is(bag-large-items),
    large_item(X),
    is_bottle(X),
    current_bag(large),
    num_items(N), N < 6,
    bag_num(Y),
    assert(in(Y, X)),
    retract(large_item(X)),
    retract(is_bottle(X)),
    write('Putting large item '),
    write(X),
    write(' in bag '),
    write(Y),
    inc_contents,
    nl.

% Rule 4
action_is(put-large-item-in-bag):-
    step_is(bag-large-items),
    large_item(X),
    current_bag(large),
    num_items(N), N < 6,
    bag_num(Y),
    assert(in(Y, X)),
    retract(large_item(X)),
    write('Putting large item '),
    write(X),
    write(' in bag '),
    write(Y),
    inc_contents,
    nl.

% Rule 5
action_is(start-fresh-large-bag):-
    step_is(bag-large-items),
    large_item(_),
    inc_bag_num,
    num_items(X),
    retract(num_items(X)),
    assert(num_items(0)),
    current_bag(Y),
    retract(current_bag(Y)),
    assert(current_bag(large)),
    bag_num(Z),
    assert(type(Z, large)),
    write('Starting fresh large bag'),
    nl.

% Rule 6
action_is(start-bag-medium-items):-
    step_is(bag-large-items),
    retract(step_is(bag-large-items)),
    assert(step_is(bag-medium-items)),
    write('Bagging medium items'),
    nl.

% Rule 7
action_is(put-medium-item-in-freezer-bag):-
    step_is(bag-medium-items),
    medium_item(X),
    num_items(N), N = 0,
    current_bag(medium),
    frozen(X),
    bag_num(Y),
    assert(in(Y, X)),
    retract(medium_item(X)),
    retract(frozen(X)),
    retract(current_bag(medium)),
    assert(current_bag(frozen)),
    bag_num(Z),
    retract(type(Z, medium)),
    assert(type(Z, freezer)),
    write('Putting medium item '),
    write(X),
    write(' in freezer bag'),
    inc_contents,
    nl.

% Rule 8
action_is(put-medium-item-in-bag):-
    step_is(bag-medium-items),
    medium_item(X),
    not(frozen(X)),
    current_bag(medium),
    num_items(N), N < 12,
    bag_num(Y),
    assert(in(Y, X)),
    retract(medium_item(X)),
    write('Putting medium item '),
    write(X),
    write(' in bag '),
    write(Y),
    inc_contents,
    nl.

% Rule 9
action_is(start-fresh-medium-bag):-
    step_is(bag-medium-items),
    medium_item(_),
    inc_bag_num,
    num_items(X),
    retract(num_items(X)),
    assert(num_items(0)),
    current_bag(Y),
    retract(current_bag(Y)),
    assert(current_bag(medium)),
    bag_num(Z),
    assert(type(Z, medium)),
    write('Starting fresh medium bag'),
    nl.

% Rule 10
action_is(start-bag-small-items):-
    step_is(bag-medium-items),
    retract(step_is(bag-medium-items)),
    assert(step_is(bag-small-items)),
    write('Bagging small items'),
    nl.

% Rule 11
action_is(put-small-item-in-bag):-
    step_is(bag-small-items),
    small_item(X),
    current_bag(small),
    num_items(N), N < 18,
    not(is_bottle(X)),
    bag_num(Y),
    assert(in(Y, X)),
    retract(small_item(X)),
    write('Putting small item '),
    write(X),
    write(' in bag '),
    write(Y),
    inc_contents,
    nl.

% Rule 12
action_is(put-small-item-in-bag):-
    step_is(bag-small-items),
    small_item(X),
    current_bag(small),
    num_items(N), N < 18,
    bag_num(Y),
    assert(in(Y, X)),
    retract(small_item(X)),
    write('Putting small item '),
    write(X),
    write(' in bag '),
    write(Y),
    inc_contents,
    nl.

% Rule 13
action_is(start-fresh-small-bag):-
    step_is(bag-small-items),
    small_item(_),
    inc_bag_num,
    num_items(X),
    retract(num_items(X)),
    assert(num_items(0)),
    current_bag(Y),
    retract(current_bag(Y)),
    assert(current_bag(small)),
    bag_num(Z),
    assert(type(Z, small)),
    write('Starting fresh small bag'),
    nl.

% Rule 14
action_is(stop):-
    step_is(bag-small-items),
    bag_num(X),
    assert(finished(X)),
    retract(step_is(bag-small-items)),
    assert(step_is(stop)),
    write('Bagging finished'),
    nl.

print:-
    finished(X),
    X > 0,
    write('Contents of bag '),
    write(X),
    write(' ('),
    type(X, Z),
    write(Z),
    write('):'),
    nl,
    in(X, Y),
    write('\t'),
    write(Y),
    nl,
    fail.
