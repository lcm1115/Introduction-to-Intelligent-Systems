#ifndef ID3_H
#define ID3_H

#include "decision.h"

#include <map>
#include <string>
#include <vector>

namespace id3 {

struct vertex {
    // If the vertex is not terminal, it splits along this key
    std::string key;
    bool terminal;
    bool positive;
    // If the vertex is not terminal, these are the immediate offspring
    std::map<std::string, vertex> children;
};

struct node {
    std::map<std::string, std::string> values;
    bool positive;
};

// Given a filepath, reads all lines from the file and creates a node from each.
// 'filepath' the filepath to the data file that contains node information
// Returns a vector that contains all nodes created from the data file.
std::vector<node> read_nodes_from_filepath(const std::string& filepath);

// Computes the entropy for a given set based on a value.
// 'data' must be non-NULL and is a vector containing all nodes.
// 'value' is the value on which entropy is being computed.
// Returns a double which represents the entropy of the set.
double entropy(const std::vector<node>& data, const std::string& value);

// Computes the entropy of a subset (split by a value) of a given set of data.
// 'data' must be non-NULL and is a vector containing all nodes.
// 'key' is the key in which we are searching for the value.
// 'split_value' is the value by which the set is being split.
// 'tar_val' is the target value for the decision tree.
// Returns a double which represents the entropy of the subset generated by
// splitting the set on a value.
double subset_entropy(const std::vector<node>& data,
                      const std::string& value,
                      const std::string& split_value,
                      const std::string& tar_val);

// Computes the information gained from splitting the data set on a specific
// value.
// 'data' must be non-NULL and is a vector containing all nodes.
// 'split_value' is the value by which the set is being split.
// 'tar_val' is the target value for the decision tree.
// Returns a double which represents the difference in current entropy and the
// entropy from splitting the set.
double info_gain(const std::vector<node>& data,
                 const std::string& split_value,
                 const std::string& tar_val);

// Counts how many times each value appears for a given key in the list of
// nodes.
// 'data' must be non-NULL and is a vector containing all nodes.
// 'key' is the key whose values are being counted.
// Returns a map with <value, count> pairings.
std::map<std::string, int> count_occurrences(
        const std::vector<node>& data, const std::string& key);

// Given the root node of a tree, prints the all paths to leaves.
// 'root' is the root node of the tree
std::string tree_to_string(const vertex& root);

// Constructs paths from root node to leaves.
// 'root' is the root node of the tree
// 'values' is the list of values leading to the current node
// 'paths' is the vector of possible paths to leaves
void tree_to_paths(const vertex& root,
                   const std::vector<std::string>& values,
                   std::vector<std::string>* const paths);

// Constructs a decision tree based on the given data
vertex construct_tree(
        const std::vector<node>& data, const std::string& tar_val);

// Splits the data set along the given value
std::map<std::string, std::vector<node> > split_nodes(
        const std::vector<node>& data, const std::string& key);

}  // namespace id3

#endif  // ID3_H
